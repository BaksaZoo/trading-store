package hu.baksa.trading.store.api.rest.product;

import hu.baksa.trading.core.api.rest.product.request.SaveProductRequest;
import hu.baksa.trading.core.api.rest.product.response.ProductResponse;
import hu.baksa.trading.core.api.rest.product.response.SaveProductResponse;
import hu.baksa.trading.store.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    @GetMapping(value = "/api/product", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ProductResponse>> getAll() {
        return ResponseEntity.ok(productService.getAllProducts());
    }

    @GetMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<ProductResponse> get(@PathVariable("id") Long id) {
        return ResponseEntity.ok(productService.getById(id));
    }

    @PostMapping(value = "/api/product", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<SaveProductResponse> post(@RequestBody SaveProductRequest request) {
        SaveProductResponse response = productService.saveProduct(request);
        return ResponseEntity.created(response.getCreatedUri()).build();
    }

    @PutMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<SaveProductResponse> put(@PathVariable("id") Long id, @RequestBody SaveProductRequest product) {
        // TODO: 2023. 06. 29. id is forcefully generated by db if product does not exists, even if id is set
        // so its not idempotent anymore
//        product.setId(id);
        return ResponseEntity.ok(productService.saveProduct(product));
    }

    @PatchMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<SaveProductResponse> patch(@PathVariable("id") Long id, @RequestBody SaveProductRequest updatedProduct) {
        return ResponseEntity.ok(productService.updateProductById(id, updatedProduct));
    }

    @DeleteMapping("/api/product/{id}")
    public ResponseEntity delete(@PathVariable("id") Long id) {
        productService.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
