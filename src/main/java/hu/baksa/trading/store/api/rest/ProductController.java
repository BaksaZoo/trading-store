package hu.baksa.trading.store.api.rest;

import hu.baksa.trading.core.model.Product;
import hu.baksa.trading.store.service.ProductService;
import jakarta.websocket.server.PathParam;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.util.List;
import java.util.NoSuchElementException;

@RestController
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    @GetMapping(value = "/api/product", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Product>> getAll() {
        return ResponseEntity.ok(productService.getAllProducts());
    }

    @GetMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Product> get(@PathParam("id") Long id) {
        try {
            return ResponseEntity.ok(productService.getById(id));
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping(value = "/api/product", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Product> post(@RequestBody Product newProduct) {
        Product product = productService.saveProductAsNew(newProduct);
        return ResponseEntity.created(
                ServletUriComponentsBuilder.fromCurrentRequest()
                        .path("/{id}")
                        .buildAndExpand(product.getId())
                        .toUri()
        ).build();
    }

    @PutMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Product> put(@PathParam("id") Long id, @RequestBody Product product) {
        // TODO: 2023. 06. 29. id is forcefully generated by db if product does not exists, even if id is set
        // so its not idempotent anymore
//        product.setId(id);
        return ResponseEntity.ok(productService.saveProduct(product));
    }

    @PatchMapping(value = "/api/product/{id}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Product> patch(@PathParam("id") Long id, @RequestBody Product updatedProduct) {
        try {
            return ResponseEntity.ok(productService.updateProductById(id, updatedProduct));
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/api/product/{id}")
    public ResponseEntity<Product> delete(@PathParam("id") Long id) {
        try {
            productService.deleteById(id);
            return ResponseEntity.noContent().build();
        } catch (NoSuchElementException e) {
            return ResponseEntity.notFound().build();
        }
    }
}
